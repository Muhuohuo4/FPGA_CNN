module conv11 #(
    parameter DATA_WIDTH = 8,
    parameter BIAS_WIDTH = 32,
    parameter MUL_WIDTH  = 16,
    parameter OUT_WIDTH  = 8
)(
    input  wire                   clk,
    input  wire                   rst,

    // 权重偏置输入
    input  wire [DATA_WIDTH-1:0]  weight_data,
    input  wire [BIAS_WIDTH-1:0]  bias_data,
    input  wire [BIAS_WIDTH-1:0]  scale_data,

    // 输入数据
    input  wire                   input_valid,
    input  wire [DATA_WIDTH-1:0]  in_data,

    // 卷积结果
    output wire                   out_valid,
    output wire [OUT_WIDTH-1:0]   out_data
);

    // 控制信号
    wire load_weight_en;
    wire read_weight_en;
    wire load_bias_en;
    wire read_bias_en;
    wire load_scale_en;
    wire read_scale_en;
    wire inputbuf_read_en;
    wire conv11_en;
    wire output_en;

    // 状态信号
    wire weight_load_done;
    wire bias_load_done;
    wire scale_load_done;
    wire input_ready;
    wire calc_valid;
    wire output_done;

    // 权重缓存
    wire [DATA_WIDTH-1:0] w0;
    wire                  weight_valid;
    // 偏置缓存
    wire [BIAS_WIDTH-1:0] bias;
    wire                  bias_valid;
    // 缩放系数缓存
    wire [BIAS_WIDTH-1:0] scale;
    wire                  scale_valid;

    // 输入数据缓存
    wire [DATA_WIDTH-1:0] d00;

    // 控制模块
    conv11_ctrl u_ctrl(
        .clk                (clk),
        .rst                (rst),
        .weight_load_done   (weight_load_done),
        .bias_load_done     (bias_load_done),
        .scale_load_done    (scale_load_done),
        .input_ready        (input_ready),
        .calc_valid         (calc_valid),
        .output_done        (output_done),
        .load_weight_en     (load_weight_en),
        .read_weight_en     (read_weight_en),
        .load_bias_en       (load_bias_en),
        .read_bias_en       (read_bias_en),
        .load_scale_en      (load_scale_en),
        .read_scale_en      (read_scale_en),
        .inputbuf_read_en   (inputbuf_read_en),
        .conv11_en          (conv11_en),
        .output_en          (output_en)
    );

    // 权重模块
    conv11_weight_input #(
        .DATA_WIDTH(DATA_WIDTH)
    ) u_weight_input(
        .clk        (clk),
        .rst        (rst),
        .load_en    (load_weight_en),
        .load_data  (weight_data),
        .read_en    (read_weight_en),
        .weight_0   (w0),
        .weight_load(weight_load_done),
        .valid      (weight_valid)
    );

    // 偏置模块
    conv11_bias_input #(
        .BIAS_WIDTH(BIAS_WIDTH)
    ) u_bias_input(
        .clk      (clk),
        .rst      (rst),
        .load_en  (load_bias_en),
        .load_data(bias_data),
        .read_en  (read_bias_en),
        .bias     (bias),
        .valid    (bias_valid),
        .bias_load(bias_load_done)
    );

    // 缩放系数模块
    conv11_scale_input #(
        .SCALE_WIDTH(BIAS_WIDTH)
    ) u_scale_input(
        .clk      (clk),
        .rst      (rst),
        .load_en  (load_scale_en),
        .load_data(scale_data),
        .read_en  (read_scale_en),
        .scale    (scale),
        .valid    (scale_valid),
        .scale_load(scale_load_done)
    );

    // 输入模块
    conv11_input #(
        .DATA_WIDTH(DATA_WIDTH)
    ) u_input(
        .clk     (clk),
        .rst     (rst),
        .input_valid(input_valid),
        .data_in (in_data),
        .out_0_0 (d00),
        .input_ready(input_ready),
        .inputbuf_read_en(inputbuf_read_en)
    );

    //计算模块
    wire [OUT_WIDTH-1:0] result;

    conv11_calc #(
        .DATA_WIDTH(DATA_WIDTH),
        .MUL_WIDTH (MUL_WIDTH),
        .OUT_WIDTH (OUT_WIDTH)
    ) u_calc(
        .clk     (clk),
        .rst     (rst),
        .conv11_en(conv11_en),
        .data_0_0(d00),
        .weight_0(w0),
        .bias    (bias),
        .scale   (scale),
        .result  (result),
        .valid   (calc_valid)
    );

    //输出模块
    conv11_output #(
        .OUT_WIDTH(OUT_WIDTH)
    ) u_output(
        .clk     (clk),
        .rst     (rst),
        .in_valid(calc_valid),
        .in_data (result),
        .out_valid(out_valid),
        .out_data (out_data)
    );

    assign output_done = out_valid;

endmodule
