module layer_1 #(
    parameter DW_IN_CH     = 16,
    parameter DW_IN_HW     = 64,
    parameter DW_OUT_CH    = 16,
    parameter DW_OUT_HW    = 64,
    parameter DW_STRIDE    = 1,
    parameter PW_IN_CH     = 16,
    parameter PW_IN_HW     = 64,
    parameter PW_OUT_CH    = 32,
    parameter PW_OUT_HW    = 64,
)(
    input  wire        clk,
    input  wire        rst,
    input  wire        start,
    output wire        done,
    output wire [7:0]  dout,
    output wire        dout_valid
);

    // === 控制信号 ===
    wire sw_start, conv_start, relu_start, write_en;
    wire sw_valid, conv_valid, relu_valid;

    wire [1:0]  input_ch_idx;
    wire [3:0]  output_ch_idx;

    wire signed [7:0]  sw_data_00, sw_data_01, sw_data_02;
    wire signed [7:0]  sw_data_10, sw_data_11, sw_data_12;
    wire signed [7:0]  sw_data_20, sw_data_21, sw_data_22;

    wire signed [15:0] conv_result;
    reg  signed [15:0] acc_result;

    wire signed [15:0] bias;
    wire signed [15:0] scale;

    wire [7:0] relu_out;

    // === 控制模块 ===
    layer_0_ctrl ctrl (
        .clk(clk), .rst(rst), .start(start),
        .sw_valid(sw_valid), .conv_valid(conv_valid), .relu_valid(relu_valid),
        .sw_start(sw_start), .conv_start(conv_start), .relu_start(relu_start),
        .write_en(write_en),
        .input_ch_idx(input_ch_idx),
        .output_ch_idx(output_ch_idx),
        .done(done)
    );
    
    feature_map_buffer #(
        .WRITE_H(OUT_HW),
        .WRITE_W(OUT_HW),
        .WRITE_C(OUT_CH),
        .READ_H(DW_IN_HW),
        .READ_W(DW_IN_HW),
        .READ_C(DW_IN_CH),
        .mode_sel(0)  // b写a读
    ) u_feature_map_buf (
        .clk            (clk),
        .rst            (rst),
        .write_en       (fm_write_en),    // 写端口：连接 a
        .write_ch       (fm_write_ch),
        .write_h        (fm_write_h),
        .write_w        (fm_write_w),
        .read_en        (fm_read_en),     // 读端口：连接 b
        .read_ch        (fm_read_ch),
        .read_h         (fm_read_h),
        .read_w         (fm_read_w),
        .data_in        (relu_out_data),
        .data_out       (sw_in)
    );
    
    assign fm_write_en = sw_valid_in;
    assign fm_write_ch = input_ch_idx;
    assign fm_write_h  = sw_in_h;
    assign fm_write_w  = sw_in_w;
    
    // === 滑窗 ===
    sliding_window_3x3 #(
    .IMG_WIDTH(DW_IN_HW),      // 图像宽度
    .STRIDE(DW_STRIDE)         // 1/2
    ) u_sw (
    .clk                (clk),
    .rst                (rst),
    .valid_in           (sw_valid_in), 
    .ready_out          (sw_ready_out), 
    .valid_out          (sw_valid_out),         // 输出有效
    .ready_in           (sw_ready_in),           
    .data_in            (sw_in),                // 输入像素
    .data_out_0(sw_data_00), .data_out_1(sw_data_01), .data_out_2(sw_data_02),
    .data_out_3(sw_data_10), .data_out_4(sw_data_11), .data_out_5(sw_data_12),
    .data_out_6(sw_data_20), .data_out_7(sw_data_21), .data_out_8(sw_data_22)
    );
    
    // === 卷积 ===
    conv33 u_conv33 (
    .data_valid_in      (sw_valid_out),        // 来自滑窗
    .data_ready_out     (sw_ready_in),         // 可留空或连接到滑窗控制
    .weight_ready_out   (),                    // 暂不需要
    .weight_valid_in    (),                    // 暂不需要
    .out_valid_out      (conv33_valid_out),
    .out_ready_in       (conv33_ready_in),                    // 输入数据有效信号
    .weight_data        (weight_data),              // 权重加载接口
    .data_in_0_0        (sw_data_00), .data_in_0_1      (sw_data_01), .data_in_0_2      (sw_data_02),
    .data_in_1_0        (sw_data_10), .data_in_1_1      (sw_data_11), .data_in_1_2      (sw_data_12),
    .data_in_2_0        (sw_data_20), .data_in_2_1      (sw_data_21), .data_in_2_2      (sw_data_22),
    .out_data           (conv33_result)
    );

    // 激活模块
    bias_scale_relu u_relu33 (
        .clk            (clk),
        .rst            (rst),
        .valid_in       (conv33_valid_out),
        .ready_out      (conv33_ready_in),
        .ready_in       (),//relu_ready_in
        .valid_out      (),//relu_valid_out
        .data_in        (conv33_result),
        .bias           (bias),
        .scale_q8_8     (scale),
        .data_out       (relu_out_data)
    );
    // === 参数 ROM（bias, scale）===
    param_mem u_param (
        .clk(clk),
        .layer_id(4'd0),
        .ch_idx(output_ch_idx),
        .bias_out(bias),
        .scale_out(scale)
    );

    feature_map_buffer #(
        .WRITE_H(OUT_HW),
        .WRITE_W(OUT_HW),
        .WRITE_C(OUT_CH),
        .READ_H(IN_HW),
        .READ_W(IN_HW),
        .READ_C(IN_CH),
        .mode_sel(1)                      // a写b读
    ) u_feature_map_buf (
        .clk            (clk),
        .rst            (rst),
        .write_en       (fm_write_en),    // 写端口：连接 a
        .write_ch       (fm_write_ch),
        .write_h        (fm_write_h),
        .write_w        (fm_write_w),
        .read_en        (fm_read_en),     // 读端口：连接 b
        .read_ch        (fm_read_ch),
        .read_h         (fm_read_h),
        .read_w         (fm_read_w),
        .data_in        (relu_out_data),
        .data_out       (conv11_data_in)
    );
    

    conv11 u_pw_conv (
        .clk(clk),
        .rst(rst),
        .start(pw_start),
        .pix_in(dw_pw_data),
        .pix_valid(dw_pw_valid),
        .result(pw_out),
        .valid(pw_valid)
    );
    
    bias_scale_relu u_relu33 (
        .clk            (clk),
        .rst            (rst),
        .valid_in       (valid_conv),
        .ready_in       (relu_ready),
        .valid_out      (relu_valid),
        .ready_out      (ready_relu),
        .data_in        (acc_result),
        .bias           (bias),
        .scale_q8_8     (scale),
        .data_out       (relu_out_data)
    );


    assign dout       = pw_out;
    assign dout_valid = pw_valid;

endmodule
